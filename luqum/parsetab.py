
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocMINUSnonassocPLUSnonassocLPARENRPARENnonassocLBRACKETTORBRACKETnonassocPHRASEnonassocTERMCOLUMN LBRACKET LPAREN MINUS PHRASE PLUS RBRACKET RPAREN TERM TOexpression : expression expressionunary_expression : PLUS unary_expressionunary_expression : MINUS unary_expressionexpression : unary_expressionunary_expression : LPAREN expression RPARENunary_expression : LBRACKET phrase_or_term TO phrase_or_term RBRACKETunary_expression : TERM COLUMN unary_expressionunary_expression : PHRASEunary_expression : TERMunary_expression : TOphrase_or_term : TERM\n                      | PHRASE'
    
_lr_action_items = {'PLUS':([0,1,2,3,4,5,7,8,9,10,11,12,13,17,18,20,22,],[3,3,-4,3,3,3,-10,-9,-8,3,-2,-3,3,3,-5,-7,-6,]),'MINUS':([0,1,2,3,4,5,7,8,9,10,11,12,13,17,18,20,22,],[4,4,-4,4,4,4,-10,-9,-8,4,-2,-3,4,4,-5,-7,-6,]),'LPAREN':([0,1,2,3,4,5,7,8,9,10,11,12,13,17,18,20,22,],[5,5,-4,5,5,5,-10,-9,-8,5,-2,-3,5,5,-5,-7,-6,]),'LBRACKET':([0,1,2,3,4,5,7,8,9,10,11,12,13,17,18,20,22,],[6,6,-4,6,6,6,-10,-9,-8,6,-2,-3,6,6,-5,-7,-6,]),'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,22,],[8,8,-4,8,8,8,15,-10,-9,-8,8,-2,-3,8,8,-5,15,-7,-6,]),'PHRASE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,22,],[9,9,-4,9,9,9,16,-10,-9,-8,9,-2,-3,9,9,-5,16,-7,-6,]),'TO':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,20,22,],[7,7,-4,7,7,7,-10,-9,-8,7,-2,-3,7,19,-11,-12,7,-5,-7,-6,]),'$end':([1,2,7,8,9,10,11,12,18,20,22,],[0,-4,-10,-9,-8,-1,-2,-3,-5,-7,-6,]),'RPAREN':([2,7,8,9,10,11,12,13,18,20,22,],[-4,-10,-9,-8,-1,-2,-3,18,-5,-7,-6,]),'COLUMN':([8,],[17,]),'RBRACKET':([15,16,21,],[-11,-12,22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,5,10,13,],[1,10,13,10,10,]),'unary_expression':([0,1,3,4,5,10,13,17,],[2,2,11,12,2,2,2,20,]),'phrase_or_term':([6,19,],[14,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression expression','expression',2,'p_expression_implicit','parser.py',252),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',258),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',264),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',276),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',281),
  ('unary_expression -> LBRACKET phrase_or_term TO phrase_or_term RBRACKET','unary_expression',5,'p_range','parser.py',287),
  ('unary_expression -> TERM COLUMN unary_expression','unary_expression',3,'p_field_search','parser.py',295),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',304),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',321),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',338),
  ('phrase_or_term -> TERM','phrase_or_term',1,'p_phrase_or_term','parser.py',344),
  ('phrase_or_term -> PHRASE','phrase_or_term',1,'p_phrase_or_term','parser.py',345),
]
